{"ast":null,"code":"var _jsxFileName = \"/Users/daana/Projects/a_toxic/client/src/components/AppRouter.js\";\nimport React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { authRoutes } from \"../routes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AppRouter = () => {\n  const isAuth = false;\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: isAuth === true && authRoutes.map(({\n      path,\n      Component\n    }) => /*#__PURE__*/_jsxDEV(Route, {\n      path: path,\n      component: Component,\n      exact: true\n    }, paht, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n};\n\n_c = AppRouter;\nexport default AppRouter;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppRouter\");","map":{"version":3,"sources":["/Users/daana/Projects/a_toxic/client/src/components/AppRouter.js"],"names":["React","Switch","Route","Redirect","authRoutes","AppRouter","isAuth","map","path","Component","paht"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,EAAgBC,KAAhB,EAAuBC,QAAvB,QAAsC,kBAAtC;AACA,SAAQC,UAAR,QAAyB,WAAzB;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACpB,QAAMC,MAAM,GAAG,KAAf;AACA,sBAEI,QAAC,MAAD;AAAA,cACKA,MAAM,KAAG,IAAT,IAAiBF,UAAU,CAACG,GAAX,CAAe,CAAC;AAACC,MAAAA,IAAD;AAAOC,MAAAA;AAAP,KAAD,kBAC7B,QAAC,KAAD;AAAkB,MAAA,IAAI,EAAED,IAAxB;AAA8B,MAAA,SAAS,EAAEC,SAAzC;AAAoD,MAAA,KAAK;AAAzD,OAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA,YADc;AADtB;AAAA;AAAA;AAAA;AAAA,UAFJ;AASH,CAXD;;KAAML,S;AAaN,eAAeA,SAAf","sourcesContent":["import React from 'react';\nimport {Switch, Route, Redirect} from 'react-router-dom';\nimport {authRoutes} from \"../routes\";\n\nconst AppRouter = () => {\n    const isAuth = false;\n    return (\n\n        <Switch>\n            {isAuth===true && authRoutes.map(({path, Component})=>\n                <Route key={paht} path={path} component={Component} exact/>\n\n            )}\n        </Switch>\n    );\n};\n\nexport default AppRouter;\n"]},"metadata":{},"sourceType":"module"}